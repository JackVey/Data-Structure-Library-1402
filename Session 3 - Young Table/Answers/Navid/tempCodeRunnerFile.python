def sift_down(arr, index, heap_size):
    left_child_index = 2 * index + 1
    right_child_index = 2 * index + 2
    smallest = index

    # Compare the parent node with its left child
    if left_child_index < heap_size and arr[left_child_index] < arr[smallest]:
        smallest = left_child_index

    # Compare the parent node with its right child
    if right_child_index < heap_size and arr[right_child_index] < arr[smallest]:
        smallest = right_child_index

    # If the smallest value is not the parent, swap them and continue sifting down
    if smallest != index:
        arr[index], arr[smallest] = arr[smallest], arr[index]
        sift_down(arr, smallest, heap_size)

# Example usage:
arr = [4, 10, 3, 5, 1]
heap_size = len(arr)

# Assuming we want to sift down the element at index 0
sift_down(arr, 0, heap_size)

print(arr)  # The array should now be a valid min-heap
